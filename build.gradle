import org.apache.tools.ant.filters.ReplaceTokens
import java.util.regex.Matcher

plugins {
    id "java"
    id "antlr"
    id "war"
    id "idea"
    id "org.springframework.boot" version "3.5.6"
    id "io.spring.dependency-management" version "1.1.7"
    id "org.ajoberstar.grgit" version "5.3.3"
    id 'io.miret.etienne.sass' version '1.6.0'
}

apply plugin: 'project-report'
apply from: 'web-test.gradle'

/*buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}*/

repositories {
    mavenCentral()
    maven {
        url = uri("https://m2.objectdb.com") //ObjectDB Repository
    }
}

dependencies {
    antlr 'org.antlr:antlr4:4.13.2'

    implementation (
            'org.flywaydb:flyway-core:11.14.1',
            'org.flywaydb:flyway-database-hsqldb:11.14.1',
            'org.flywaydb:flyway-mysql:11.14.1',
            'org.antlr:antlr4-runtime:4.13.2',
            'com.google.guava:guava:33.5.0-jre',
            'org.reflections:reflections:0.10.2',
            'org.apache.commons:commons-lang3:3.19.0',
            'org.apache.commons:commons-compress:1.28.0',
            'commons-io:commons-io:2.20.0',
            'commons-codec:commons-codec:1.19.0',
            'org.eclipse.persistence:org.eclipse.persistence.jpa:4.0.8',
            'jakarta.transaction:jakarta.transaction-api:2.0.1',
            'com.objectdb:objectdb-jk:2.9.4',
            'org.yaml:snakeyaml:2.5',
            'org.springframework.boot:spring-boot-starter',
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-mail',
            'org.springframework.boot:spring-boot-starter-jdbc',
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-log4j2',
            'org.springframework.boot:spring-boot-starter-thymeleaf',
            'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.boot:spring-boot-starter-validation',
            'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.4.0',
            'org.thymeleaf.extras:thymeleaf-extras-springsecurity6',
            'org.springframework.boot:spring-boot-devtools',
            'jakarta.xml.bind:jakarta.xml.bind-api:4.0.4',
            'com.h2database:h2',
            'com.mysql:mysql-connector-j',
            'org.json:json:20250517'
    )

    if (project.getGradle().startParameter.taskNames.contains("bootWar")) {
        providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    }
    implementation 'org.seleniumhq.selenium:selenium-java:4.37.0'
    testImplementation(
            'io.github.bonigarcia:webdrivermanager:6.3.2',
            'org.springframework.boot:spring-boot-starter-test',
            'org.springframework.security:spring-security-test',
            'org.junit.jupiter:junit-jupiter-api:6.0.0',
            'org.junit.jupiter:junit-jupiter-params:6.0.0'
    )

    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:6.0.0'
    )

    compileOnly "org.springframework.boot:spring-boot-configuration-processor"
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

idea {
    module {
        contentRoot = file("$projectDir")

        sourceDirs += file("src/main/java")
        sourceDirs += file("src/main/antlr")

        testSources.from file("src/test/java")
        testSources.from file("src/webTest/java")

        resourceDirs += file("src/main/resources")

        //generatedSourceDirs
        generatedSourceDirs += file("${buildDir}/tmp/src/main/antlr")

        excludeDirs += file("${buildDir}/tmp/src/main/java")
        excludeDirs += file("${buildDir}/tmp/src/test/java")
    }
}

group = 'uk.ac.warwick.dcs.sherlock'
version = "release"

if (grgit != null) {
    project.ext.lastTag = grgit.tag.list().findAll { (it.name ==~ /([0-9]+).([0-9]+)$/).find() }.sort { -it.commit.time }.sort { -TagSupport.tagOrder(/([0-9]+).([0-9]+)$/, it.name) }.collect { it.name }[0]
    project.ext.latest = grgit.tag.list().find { it.name == project.lastTag.toString() }.collect { it }[0]
    if (project.ext.latest != null && project.ext.latest.name != null) {
        project.ext.count = grgit.log { range(project.ext.latest.name, "HEAD") }.size()
        project.version = "${project.ext.lastTag}.${project.count}"
    }
}

if (System.env.TRAVIS == "true") {
    println "Building on travis"
    build.dependsOn javadoc
    new File("version.txt").text = """build/${project.version}"""
}


description = """Sherlock"""

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

task printVersion {
    println project.name + '-' + project.version
}

javadoc {
    source = sourceSets.main.allJava
    destinationDir = file("${projectDir}/docs")
    // options.memberLevel = JavadocMemberLevel.PRIVATE
    classpath += configurations.compileClasspath
}

generateGrammarSource {
    outputDirectory = file("${buildDir}/tmp/src/main/antlr/uk/ac/warwick/dcs/sherlock/module/model/base/lang")
}

task generateSources(type: Copy) {
    from("src/main/java")
    exclude "**/sherlock/deprecated/**"
    into "$buildDir/tmp/src/main/java"
    filter(ReplaceTokens, tokens: [VERSION: project.version.toString()])
}
sourceSets.main.java.srcDirs = ["$buildDir/tmp/src/main/java", "$buildDir/tmp/src/main/antlr"]
generateSources.dependsOn generateGrammarSource
compileJava.dependsOn generateSources

task generateTestSources(type: Copy) {
    from("src/test/java")
    exclude "**/sherlock/deprecated/**"
    into "$buildDir/tmp/src/test/java"
}
sourceSets.test.java.srcDirs = ["$buildDir/tmp/src/test/java"]
compileTestJava.dependsOn generateTestSources

task deps(type: Copy) {
    from configurations.runtimeClasspath
    into "$buildDir/out/lib"
}

// Combine and minify JS files
task combineJs {
    doFirst {
        delete "${projectDir}/src/main/resources/static/js/default.js"
    }
    def jsFiles = [
            "${projectDir}/src/main/javascript/jquery.min.js",
            "${projectDir}/src/main/javascript/popper.min.js",
            "${projectDir}/src/main/javascript/bootstrap.min.js",
            "${projectDir}/src/main/javascript/datatables.min.js",
            "${projectDir}/src/main/javascript/loader.js",
            "${projectDir}/src/main/javascript/vis.min.js",
            "${projectDir}/src/main/javascript/prism.js",
            "${projectDir}/src/main/javascript/js.cookie.js",
            "${projectDir}/src/main/javascript/cookieconsent.min.js",
            "${projectDir}/src/main/javascript/custom.js"
    ]
    
    doLast {
        def outputDir = file("${projectDir}/src/main/resources/static/js")
        outputDir.mkdirs()
        def combinedFile = file("${projectDir}/src/main/resources/static/js/default.js")
        combinedFile.text = jsFiles.collect { file(it).text }.join('\n')
    }
}

// For now, just copy the combined JS as the minified version
task minifyJs(type: Copy) {
    dependsOn combineJs
    doFirst {
        delete "${projectDir}/src/main/resources/static/js/default.min.js"
    }
    from "${projectDir}/src/main/resources/static/js/default.js"
    into "${projectDir}/src/main/resources/static/js"
    rename 'default.js', 'default.min.js'
}

// Compile SASS files
tasks.named('compileSass') {
    sourceDir = file("${projectDir}/src/main/sass")
    outputDir = file("${buildDir}/generated/sass")
    destPath = "static/css"
    entryPoint "default.scss", "default.css"
    entryPoint "blank.scss", "blank.css"
    style = 'compressed'
}

tasks.named('processResources') {
    dependsOn tasks.named('compileSass')
    from(tasks.named('compileSass').map { it.outputDir }) {
        into 'static/css'
    }
}

task buildJsAssets {
    dependsOn minifyJs
    dependsOn tasks.named('compileSass')
}

processResources.dependsOn buildJsAssets

jar {
    from sourceSets.main.output
    include 'uk/ac/warwick/dcs/sherlock/api/**'
    include 'uk/ac/warwick/dcs/sherlock/module/model/base/**'

    enabled = true //enable to build a standard jar
    destinationDirectory = file("$buildDir/out")
    archiveClassifier = 'dev'
    manifest {
        attributes(
                'Implementation-Version': version,
        )
    }
    delete fileTree("$buildDir/out") {
        include '*-dev.jar'
        exclude jar.archiveFileName.get()
        exclude jar.archiveFile.get().asFile.getName()
    }
}

bootJar {
    dependsOn buildJsAssets
    destinationDirectory = file("$buildDir/out")
    mainClass = 'uk.ac.warwick.dcs.sherlock.launch.SherlockClient'
    manifest {
        attributes(
                'Implementation-Version': version
        )
    }
    delete fileTree("$buildDir/out") {
        include '*.jar'
        exclude bootJar.archiveFileName.get()
        exclude jar.archiveFile.get().asFile.getName()
        exclude '*-dev.jar'
    }
}
jar.dependsOn bootJar

bootWar {
    dependsOn buildJsAssets
    destinationDirectory = file("$buildDir/out")
    mainClass = 'uk.ac.warwick.dcs.sherlock.launch.SherlockServer'
    manifest {
        attributes(
                'Implementation-Version': version
        )
    }
    delete fileTree("$buildDir/out") {
        include '*.war'
        exclude bootJar.archiveFileName.get()
        exclude war.archiveFile.get().asFile.getName()
    }
}
war.dependsOn bootWar
assemble.dependsOn jar

bootRun {
    dependsOn buildJsAssets
    mainClass = 'uk.ac.warwick.dcs.sherlock.launch.SherlockClient'
    jvmArgs = ["-Dspring.profiles.active=dev", "-Dspring.output.ansi.enabled=ALWAYS"]
}

test {
    useJUnitPlatform()
}

task branchSetup {
    if (grgit != null) {
        ant.replaceregexp(match: '# Sherlock(.*)', replace: "# Sherlock  [![Build Status: ${grgit.branch.current().name}](https://travis-ci.org/DCS-Sherlock/Sherlock.svg?branch=${grgit.branch.current().name})](https://travis-ci.org/DCS-Sherlock/Sherlock?branch=${grgit.branch.current().name})", flags: 's', byline: true) {
            fileset(dir: project.projectDir, includes: 'README.md')
        }
    }
}

class TagSupport {
    static int tagOrder(String tagPattern, String tagName) {
        Matcher m = tagName =~ tagPattern

        if (m.find()) {
            int ngroups = m.groupCount()

            if (ngroups < 1) {
                throw new IllegalArgumentException("Tag pattern is expected to have at least one number grouping instruction: $tagPattern")
            } else {
                return m.group(1) as int
            }
        } else {
            throw new IllegalStateException("Tag $tagName should have matched $tagPattern")
        }
    }
}