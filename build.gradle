import org.apache.tools.ant.filters.ReplaceTokens
import java.util.regex.Matcher

plugins {
    id "java"
    id "antlr"
    id "war"
    id "idea"
    id "org.springframework.boot" version "3.5.6"
    id "io.spring.dependency-management" version "1.1.7"
    id "org.ajoberstar.grgit" version "5.3.3"
    id 'io.miret.etienne.sass' version '1.6.0'
    id 'project-report'
}

apply from: 'web-test.gradle'

/*buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}*/

repositories {
    mavenCentral()
    maven {
        url = uri("https://m2.objectdb.com") //ObjectDB Repository
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(25)
    }
}

dependencies {
    antlr('org.antlr:antlr4:4.13.2')

    implementation(
            'org.flywaydb:flyway-core:11.14.1',
            'org.flywaydb:flyway-database-hsqldb:11.14.1',
            'org.flywaydb:flyway-mysql:11.14.1',
            'org.antlr:antlr4-runtime:4.13.2',
            'com.google.guava:guava:33.5.0-jre',
            'org.reflections:reflections:0.10.2',
            'org.apache.commons:commons-lang3:3.19.0',
            'org.apache.commons:commons-compress:1.28.0',
            'commons-io:commons-io:2.20.0',
            'commons-codec:commons-codec:1.19.0',
            'org.eclipse.persistence:org.eclipse.persistence.jpa:4.0.8',
            'jakarta.transaction:jakarta.transaction-api:2.0.1',
            'com.objectdb:objectdb-jk:2.9.4',
            'org.yaml:snakeyaml:2.5',
            'org.springframework.boot:spring-boot-starter',
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-mail',
            'org.springframework.boot:spring-boot-starter-jdbc',
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-log4j2',
            'org.springframework.boot:spring-boot-starter-thymeleaf',
            'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.boot:spring-boot-starter-validation',
            'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.4.0',
            'org.thymeleaf.extras:thymeleaf-extras-springsecurity6',
            'org.springframework.boot:spring-boot-devtools',
            'jakarta.xml.bind:jakarta.xml.bind-api:4.0.4',
            'com.h2database:h2',
            'com.mysql:mysql-connector-j',
            'org.json:json:20250517',
            'org.seleniumhq.selenium:selenium-java:4.37.0'
    )

    providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
    
    testImplementation(
            'io.github.bonigarcia:webdrivermanager:6.3.2',
            'org.springframework.boot:spring-boot-starter-test',
            'org.springframework.security:spring-security-test',
            'org.junit.jupiter:junit-jupiter-api:5.12.2',
            'org.junit.jupiter:junit-jupiter-params:5.12.2'
    )

    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.12.2')

    compileOnly('org.springframework.boot:spring-boot-configuration-processor')
    annotationProcessor('org.springframework.boot:spring-boot-configuration-processor')
}

configurations.configureEach {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

idea {
    module {
        contentRoot = file("$projectDir")

        sourceDirs += file("src/main/java")
        sourceDirs += file("src/main/antlr")

        testSources.from(file("src/test/java"))
        testSources.from(file("src/webTest/java"))

        resourceDirs += file("src/main/resources")

        //generatedSourceDirs
        generatedSourceDirs += layout.buildDirectory.dir("tmp/src/main/antlr").get().asFile

        excludeDirs += layout.buildDirectory.dir("tmp/src/main/java").get().asFile
        excludeDirs += layout.buildDirectory.dir("tmp/src/test/java").get().asFile
    }
}

group = 'uk.ac.warwick.dcs.sherlock'
version = "release"

if (grgit != null) {
    project.ext.lastTag = grgit.tag.list().findAll { (it.name ==~ /([0-9]+).([0-9]+)$/).find() }.sort { -it.commit.time }.sort { -TagSupport.tagOrder(/([0-9]+).([0-9]+)$/, it.name) }.collect { it.name }[0]
    project.ext.latest = grgit.tag.list().find { it.name == project.lastTag.toString() }.collect { it }[0]
    if (project.ext.latest != null && project.ext.latest.name != null) {
        project.ext.count = grgit.log { range(project.ext.latest.name, "HEAD") }.size()
        project.version = "${project.ext.lastTag}.${project.count}"
    }
}

description = """Sherlock"""

tasks.register('printVersion') {
    def projectName = project.name
    def projectVersion = project.version
    doLast {
        println "${projectName}-${projectVersion}"
    }
}

tasks.named('javadoc') {
    source = sourceSets.main.allJava
    destinationDir = file("${projectDir}/docs")
    // options.memberLevel = JavadocMemberLevel.PRIVATE
    classpath += configurations.compileClasspath
}

tasks.named('generateGrammarSource') {
    outputDirectory = layout.buildDirectory.dir("tmp/src/main/antlr/uk/ac/warwick/dcs/sherlock/module/model/base/lang").get().asFile
}

tasks.register('generateSources', Copy) {
    from("src/main/java")
    exclude("**/sherlock/deprecated/**")
    into(layout.buildDirectory.dir("tmp/src/main/java"))
    filter(ReplaceTokens, tokens: [VERSION: project.version.toString()])
    dependsOn(tasks.named('generateGrammarSource'))
}

sourceSets {
    main {
        java {
            srcDirs = [layout.buildDirectory.dir("tmp/src/main/java").get().asFile, 
                       layout.buildDirectory.dir("tmp/src/main/antlr").get().asFile]
        }
    }
    test {
        java {
            srcDirs = [layout.buildDirectory.dir("tmp/src/test/java").get().asFile]
        }
    }
}

tasks.named('compileJava') {
    dependsOn(tasks.named('generateSources'))
}

tasks.register('generateTestSources', Copy) {
    from("src/test/java")
    exclude("**/sherlock/deprecated/**")
    into(layout.buildDirectory.dir("tmp/src/test/java"))
}

tasks.named('compileTestJava') {
    dependsOn(tasks.named('generateTestSources'))
}

tasks.register('deps', Copy) {
    from(configurations.runtimeClasspath)
    into(layout.buildDirectory.dir("out/lib"))
}

// Combine and minify JS files
tasks.register('combineJs') {
    doFirst {
        delete("${projectDir}/src/main/resources/static/js/default.js")
    }

    def jsFiles = [
            "jquery.min.js",
            "popper.min.js",
            "bootstrap.min.js",
            "datatables.min.js",
            "loader.js",
            "vis.min.js",
            "prism.js",
            "js.cookie.js",
            "cookieconsent.min.js",
            "custom.js"
    ].collect { file("${projectDir}/src/main/javascript/${it}") }
    
    inputs.files(jsFiles)
    outputs.file("${projectDir}/src/main/resources/static/js/default.js")
    
    doLast {
        def outputDir = file("${projectDir}/src/main/resources/static/js")
        outputDir.mkdirs()
        def combinedFile = outputs.files.singleFile
        combinedFile.text = jsFiles.collect { it.text }.join('\n')
    }
}

// For now, just copy the combined JS as the minified version
tasks.register('minifyJs', Copy) {
    dependsOn(tasks.named('combineJs'))
    
    doFirst {
        delete("${projectDir}/src/main/resources/static/js/default.min.js")
    }
    
    from("${projectDir}/src/main/resources/static/js/default.js")
    into("${projectDir}/src/main/resources/static/js")
    rename('default.js', 'default.min.js')
}

// Compile SASS files
tasks.named('compileSass') {
    dependsOn(tasks.named('minifyJs'))
    sourceDir = file("${projectDir}/src/main/sass")
    outputDir = file("${projectDir}/src/main/resources")
    destPath = "static/css"
    entryPoint("default.scss", "default.css")
    entryPoint("blank.scss", "blank.css")
    style = 'compressed'
}

tasks.named('processResources') {
    dependsOn(tasks.named('compileSass'))
}

tasks.named('jar', Jar) {
    from(sourceSets.main.output)
    include('uk/ac/warwick/dcs/sherlock/api/**')
    include('uk/ac/warwick/dcs/sherlock/module/model/base/**')

    enabled = true //enable to build a standard jar
    destinationDirectory = layout.buildDirectory.dir("out")
    archiveClassifier = 'dev'
    
    manifest {
        attributes(
                'Implementation-Version': version,
        )
    }
    
    doLast {
        delete(fileTree(layout.buildDirectory.dir("out").get().asFile) {
            include('*-dev.jar')
            exclude(archiveFileName.get())
            exclude(archiveFile.get().asFile.getName())
        })
    }
}

tasks.named('bootJar') {
    destinationDirectory = layout.buildDirectory.dir("out")
    mainClass = 'uk.ac.warwick.dcs.sherlock.launch.SherlockClient'
    
    manifest {
        attributes(
                'Implementation-Version': version
        )
    }
    
    doLast {
        delete(fileTree(layout.buildDirectory.dir("out").get().asFile) {
            include('*.jar')
            exclude(archiveFileName.get())
            exclude(tasks.named('jar').get().archiveFile.get().asFile.getName())
            exclude('*-dev.jar')
        })
    }
}

tasks.named('jar') {
    dependsOn(tasks.named('bootJar'))
}

tasks.named('bootWar') {
    destinationDirectory = layout.buildDirectory.dir("out")
    mainClass = 'uk.ac.warwick.dcs.sherlock.launch.SherlockServer'
    
    manifest {
        attributes(
                'Implementation-Version': version
        )
    }
    
    doLast {
        delete(fileTree(layout.buildDirectory.dir("out").get().asFile) {
            include('*.war')
            exclude(archiveFileName.get())
            exclude(tasks.named('jar').get().archiveFile.get().asFile.getName())
        })
    }
}

tasks.named('war') {
    dependsOn(tasks.named('bootWar'))
}

tasks.named('assemble') {
    dependsOn(tasks.named('jar'))
}

tasks.named('bootRun') {
    mainClass = 'uk.ac.warwick.dcs.sherlock.launch.SherlockClient'
    jvmArgs = ["-Dspring.profiles.active=dev", "-Dspring.output.ansi.enabled=ALWAYS"]
}

tasks.named('test') {
    useJUnitPlatform()
}

class TagSupport {
    static int tagOrder(String tagPattern, String tagName) {
        Matcher m = tagName =~ tagPattern

        if (m.find()) {
            int ngroups = m.groupCount()

            if (ngroups < 1) {
                throw new IllegalArgumentException("Tag pattern is expected to have at least one number grouping instruction: $tagPattern")
            } else {
                return m.group(1) as int
            }
        } else {
            throw new IllegalStateException("Tag $tagName should have matched $tagPattern")
        }
    }
}